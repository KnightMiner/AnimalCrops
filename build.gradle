buildscript {
  repositories {
    maven { url = "https://files.minecraftforge.net/maven" }
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
  }
}
apply plugin: 'net.minecraftforge.gradle'

group = "knightminer"
archivesBaseName = "AnimalCrops"

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
  // Load config.  It shall from now be referenced as simply config or project.config
  def prop = new Properties()
  prop.load(it)
  project.ext.config = new ConfigSlurper().parse prop
}
configurations {
  deployerJars
}

version = "${config.minecraft_version}-${config.mod_version}"

minecraft {
	mappings channel: 'snapshot', version: config.mappings_version
  accessTransformer project.file("src/main/resources/META-INF/accesstransformer.cfg")

  runs {
    client {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        animalcrops {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        animalcrops {
           source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      args '--mod', 'inspirations', '--all', '--output', file('src/generated/resources/')

      mods {
        animalcrops {
           source sourceSets.main
        }
      }
    }
  }
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

repositories {
	// JEI
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = "https://dvs1.progwml6.com/files/maven"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "https://modmaven.k-4u.nl"
  }
}

dependencies {
  minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"
  
  // compile against the JEI API but do not include it at runtime
  compileOnly fg.deobf("mezz.jei:jei-${config.minecraft_version}:${config.jei_version}:api")
  // at runtime, use the full JEI jar
  runtimeOnly fg.deobf("mezz.jei:jei-${config.minecraft_version}:${config.jei_version}")
}

jar {
  manifest {
    attributes([
      "Specification-Title": "Animal Crops",
      "Specification-Vendor": "KnightMiner",
      "Specification-Version": "1", // We are version 1 of ourselves
      "Implementation-Title": project.name,
      "Implementation-Version": "${version}",
      "Implementation-Vendor": "KnightMiner",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

// because the normal output has been made to be obfuscated
task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  classifier = 'sources'
}

artifacts {
  archives sourcesJar
}